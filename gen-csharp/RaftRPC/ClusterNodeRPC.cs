/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace RaftRPC
{
  public partial class ClusterNodeRPC {
    public interface Iface {
      bool heartbeat(int LeaderID, int term, int prevLogIndex, int prevLogTerm, string entry, int leaderCommit);
      #if SILVERLIGHT
      IAsyncResult Begin_heartbeat(AsyncCallback callback, object state, int LeaderID, int term, int prevLogIndex, int prevLogTerm, string entry, int leaderCommit);
      bool End_heartbeat(IAsyncResult asyncResult);
      #endif
      VoteBackStruct voteForMe(int term, int CandidateId, int lastLogIdx, int lastLogTerm);
      #if SILVERLIGHT
      IAsyncResult Begin_voteForMe(AsyncCallback callback, object state, int term, int CandidateId, int lastLogIdx, int lastLogTerm);
      VoteBackStruct End_voteForMe(IAsyncResult asyncResult);
      #endif
      bool appendLogEntry(string data);
      #if SILVERLIGHT
      IAsyncResult Begin_appendLogEntry(AsyncCallback callback, object state, string data);
      bool End_appendLogEntry(IAsyncResult asyncResult);
      #endif
      int getTestNum();
      #if SILVERLIGHT
      IAsyncResult Begin_getTestNum(AsyncCallback callback, object state);
      int End_getTestNum(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_heartbeat(AsyncCallback callback, object state, int LeaderID, int term, int prevLogIndex, int prevLogTerm, string entry, int leaderCommit)
      {
        return send_heartbeat(callback, state, LeaderID, term, prevLogIndex, prevLogTerm, entry, leaderCommit);
      }

      public bool End_heartbeat(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_heartbeat();
      }

      #endif

      public bool heartbeat(int LeaderID, int term, int prevLogIndex, int prevLogTerm, string entry, int leaderCommit)
      {
        #if !SILVERLIGHT
        send_heartbeat(LeaderID, term, prevLogIndex, prevLogTerm, entry, leaderCommit);
        return recv_heartbeat();

        #else
        var asyncResult = Begin_heartbeat(null, null, LeaderID, term, prevLogIndex, prevLogTerm, entry, leaderCommit);
        return End_heartbeat(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_heartbeat(AsyncCallback callback, object state, int LeaderID, int term, int prevLogIndex, int prevLogTerm, string entry, int leaderCommit)
      #else
      public void send_heartbeat(int LeaderID, int term, int prevLogIndex, int prevLogTerm, string entry, int leaderCommit)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("heartbeat", TMessageType.Call, seqid_));
        heartbeat_args args = new heartbeat_args();
        args.LeaderID = LeaderID;
        args.Term = term;
        args.PrevLogIndex = prevLogIndex;
        args.PrevLogTerm = prevLogTerm;
        args.Entry = entry;
        args.LeaderCommit = leaderCommit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_heartbeat()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        heartbeat_result result = new heartbeat_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "heartbeat failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_voteForMe(AsyncCallback callback, object state, int term, int CandidateId, int lastLogIdx, int lastLogTerm)
      {
        return send_voteForMe(callback, state, term, CandidateId, lastLogIdx, lastLogTerm);
      }

      public VoteBackStruct End_voteForMe(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_voteForMe();
      }

      #endif

      public VoteBackStruct voteForMe(int term, int CandidateId, int lastLogIdx, int lastLogTerm)
      {
        #if !SILVERLIGHT
        send_voteForMe(term, CandidateId, lastLogIdx, lastLogTerm);
        return recv_voteForMe();

        #else
        var asyncResult = Begin_voteForMe(null, null, term, CandidateId, lastLogIdx, lastLogTerm);
        return End_voteForMe(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_voteForMe(AsyncCallback callback, object state, int term, int CandidateId, int lastLogIdx, int lastLogTerm)
      #else
      public void send_voteForMe(int term, int CandidateId, int lastLogIdx, int lastLogTerm)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("voteForMe", TMessageType.Call, seqid_));
        voteForMe_args args = new voteForMe_args();
        args.Term = term;
        args.CandidateId = CandidateId;
        args.LastLogIdx = lastLogIdx;
        args.LastLogTerm = lastLogTerm;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public VoteBackStruct recv_voteForMe()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        voteForMe_result result = new voteForMe_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "voteForMe failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_appendLogEntry(AsyncCallback callback, object state, string data)
      {
        return send_appendLogEntry(callback, state, data);
      }

      public bool End_appendLogEntry(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_appendLogEntry();
      }

      #endif

      public bool appendLogEntry(string data)
      {
        #if !SILVERLIGHT
        send_appendLogEntry(data);
        return recv_appendLogEntry();

        #else
        var asyncResult = Begin_appendLogEntry(null, null, data);
        return End_appendLogEntry(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_appendLogEntry(AsyncCallback callback, object state, string data)
      #else
      public void send_appendLogEntry(string data)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("appendLogEntry", TMessageType.Call, seqid_));
        appendLogEntry_args args = new appendLogEntry_args();
        args.Data = data;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_appendLogEntry()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        appendLogEntry_result result = new appendLogEntry_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "appendLogEntry failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTestNum(AsyncCallback callback, object state)
      {
        return send_getTestNum(callback, state);
      }

      public int End_getTestNum(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTestNum();
      }

      #endif

      public int getTestNum()
      {
        #if !SILVERLIGHT
        send_getTestNum();
        return recv_getTestNum();

        #else
        var asyncResult = Begin_getTestNum(null, null);
        return End_getTestNum(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTestNum(AsyncCallback callback, object state)
      #else
      public void send_getTestNum()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTestNum", TMessageType.Call, seqid_));
        getTestNum_args args = new getTestNum_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_getTestNum()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTestNum_result result = new getTestNum_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTestNum failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["heartbeat"] = heartbeat_Process;
        processMap_["voteForMe"] = voteForMe_Process;
        processMap_["appendLogEntry"] = appendLogEntry_Process;
        processMap_["getTestNum"] = getTestNum_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void heartbeat_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        heartbeat_args args = new heartbeat_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        heartbeat_result result = new heartbeat_result();
        result.Success = iface_.heartbeat(args.LeaderID, args.Term, args.PrevLogIndex, args.PrevLogTerm, args.Entry, args.LeaderCommit);
        oprot.WriteMessageBegin(new TMessage("heartbeat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void voteForMe_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        voteForMe_args args = new voteForMe_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        voteForMe_result result = new voteForMe_result();
        result.Success = iface_.voteForMe(args.Term, args.CandidateId, args.LastLogIdx, args.LastLogTerm);
        oprot.WriteMessageBegin(new TMessage("voteForMe", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void appendLogEntry_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        appendLogEntry_args args = new appendLogEntry_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        appendLogEntry_result result = new appendLogEntry_result();
        result.Success = iface_.appendLogEntry(args.Data);
        oprot.WriteMessageBegin(new TMessage("appendLogEntry", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTestNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTestNum_args args = new getTestNum_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTestNum_result result = new getTestNum_result();
        result.Success = iface_.getTestNum();
        oprot.WriteMessageBegin(new TMessage("getTestNum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class heartbeat_args : TBase
    {
      private int _LeaderID;
      private int _term;
      private int _prevLogIndex;
      private int _prevLogTerm;
      private string _entry;
      private int _leaderCommit;

      public int LeaderID
      {
        get
        {
          return _LeaderID;
        }
        set
        {
          __isset.LeaderID = true;
          this._LeaderID = value;
        }
      }

      public int Term
      {
        get
        {
          return _term;
        }
        set
        {
          __isset.term = true;
          this._term = value;
        }
      }

      public int PrevLogIndex
      {
        get
        {
          return _prevLogIndex;
        }
        set
        {
          __isset.prevLogIndex = true;
          this._prevLogIndex = value;
        }
      }

      public int PrevLogTerm
      {
        get
        {
          return _prevLogTerm;
        }
        set
        {
          __isset.prevLogTerm = true;
          this._prevLogTerm = value;
        }
      }

      public string Entry
      {
        get
        {
          return _entry;
        }
        set
        {
          __isset.entry = true;
          this._entry = value;
        }
      }

      public int LeaderCommit
      {
        get
        {
          return _leaderCommit;
        }
        set
        {
          __isset.leaderCommit = true;
          this._leaderCommit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool LeaderID;
        public bool term;
        public bool prevLogIndex;
        public bool prevLogTerm;
        public bool entry;
        public bool leaderCommit;
      }

      public heartbeat_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  LeaderID = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Term = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  PrevLogIndex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  PrevLogTerm = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  Entry = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.I32) {
                  LeaderCommit = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("heartbeat_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.LeaderID) {
            field.Name = "LeaderID";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(LeaderID);
            oprot.WriteFieldEnd();
          }
          if (__isset.term) {
            field.Name = "term";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Term);
            oprot.WriteFieldEnd();
          }
          if (__isset.prevLogIndex) {
            field.Name = "prevLogIndex";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(PrevLogIndex);
            oprot.WriteFieldEnd();
          }
          if (__isset.prevLogTerm) {
            field.Name = "prevLogTerm";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(PrevLogTerm);
            oprot.WriteFieldEnd();
          }
          if (Entry != null && __isset.entry) {
            field.Name = "entry";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Entry);
            oprot.WriteFieldEnd();
          }
          if (__isset.leaderCommit) {
            field.Name = "leaderCommit";
            field.Type = TType.I32;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(LeaderCommit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("heartbeat_args(");
        bool __first = true;
        if (__isset.LeaderID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderID: ");
          __sb.Append(LeaderID);
        }
        if (__isset.term) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Term: ");
          __sb.Append(Term);
        }
        if (__isset.prevLogIndex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PrevLogIndex: ");
          __sb.Append(PrevLogIndex);
        }
        if (__isset.prevLogTerm) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PrevLogTerm: ");
          __sb.Append(PrevLogTerm);
        }
        if (Entry != null && __isset.entry) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Entry: ");
          __sb.Append(Entry);
        }
        if (__isset.leaderCommit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LeaderCommit: ");
          __sb.Append(LeaderCommit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class heartbeat_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public heartbeat_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("heartbeat_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("heartbeat_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class voteForMe_args : TBase
    {
      private int _term;
      private int _CandidateId;
      private int _lastLogIdx;
      private int _lastLogTerm;

      public int Term
      {
        get
        {
          return _term;
        }
        set
        {
          __isset.term = true;
          this._term = value;
        }
      }

      public int CandidateId
      {
        get
        {
          return _CandidateId;
        }
        set
        {
          __isset.CandidateId = true;
          this._CandidateId = value;
        }
      }

      public int LastLogIdx
      {
        get
        {
          return _lastLogIdx;
        }
        set
        {
          __isset.lastLogIdx = true;
          this._lastLogIdx = value;
        }
      }

      public int LastLogTerm
      {
        get
        {
          return _lastLogTerm;
        }
        set
        {
          __isset.lastLogTerm = true;
          this._lastLogTerm = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool term;
        public bool CandidateId;
        public bool lastLogIdx;
        public bool lastLogTerm;
      }

      public voteForMe_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Term = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  CandidateId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  LastLogIdx = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  LastLogTerm = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("voteForMe_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.term) {
            field.Name = "term";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Term);
            oprot.WriteFieldEnd();
          }
          if (__isset.CandidateId) {
            field.Name = "CandidateId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(CandidateId);
            oprot.WriteFieldEnd();
          }
          if (__isset.lastLogIdx) {
            field.Name = "lastLogIdx";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(LastLogIdx);
            oprot.WriteFieldEnd();
          }
          if (__isset.lastLogTerm) {
            field.Name = "lastLogTerm";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(LastLogTerm);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("voteForMe_args(");
        bool __first = true;
        if (__isset.term) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Term: ");
          __sb.Append(Term);
        }
        if (__isset.CandidateId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CandidateId: ");
          __sb.Append(CandidateId);
        }
        if (__isset.lastLogIdx) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LastLogIdx: ");
          __sb.Append(LastLogIdx);
        }
        if (__isset.lastLogTerm) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("LastLogTerm: ");
          __sb.Append(LastLogTerm);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class voteForMe_result : TBase
    {
      private VoteBackStruct _success;

      public VoteBackStruct Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public voteForMe_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new VoteBackStruct();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("voteForMe_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("voteForMe_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class appendLogEntry_args : TBase
    {
      private string _data;

      public string Data
      {
        get
        {
          return _data;
        }
        set
        {
          __isset.data = true;
          this._data = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool data;
      }

      public appendLogEntry_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Data = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("appendLogEntry_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Data != null && __isset.data) {
            field.Name = "data";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Data);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("appendLogEntry_args(");
        bool __first = true;
        if (Data != null && __isset.data) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Data: ");
          __sb.Append(Data);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class appendLogEntry_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public appendLogEntry_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("appendLogEntry_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("appendLogEntry_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTestNum_args : TBase
    {

      public getTestNum_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTestNum_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTestNum_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTestNum_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getTestNum_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getTestNum_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getTestNum_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
